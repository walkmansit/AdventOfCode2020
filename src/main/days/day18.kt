package main.days

import java.lang.StringBuilder
import java.util.*

object Day18 {

    private val input = """
        5 + 3 + (7 * 9 + 8 + 8) + 9
        4 + 2 * ((2 + 8 * 7 * 9) * 7 * (2 + 4) + (7 + 9 + 5 + 6 * 2 * 6))
        5 + 8 * 5 * (6 + 8 * 7) * 5
        (3 * 5) * 5 + 7 + 6 * 8 + (2 * 9 + 4 + (8 + 4 + 6 * 7 + 6) * 8 + (8 * 5 + 3))
        8 + ((4 * 9 + 5) * 7 + (5 * 2 * 5 + 6 + 2) + 4 + 4 * (6 * 7 * 8 * 3 + 4 * 5)) * (9 + 3 * 8) + 4
        (5 + 2 * 4) + 5 * ((9 * 4 + 5 + 6 * 4) + 6 * 7 + 4) + 4
        8 * 3 * ((7 + 7) + (7 * 2 + 3) + 2 + 4) * (6 + 6 * 5 + 4)
        3 + 2 * 6 * 8 + (4 * 7 * (2 * 7 + 2 * 4))
        6 * 9 * 7 * 9 * (7 * (3 + 8) + 4 + 9 + 7) + 6
        5 + 4 + ((8 + 8) + 7) + 8 * 9 * 9
        ((5 * 6 + 7 + 4 + 3) * 9) * (4 + 8 * 9 + (5 + 2 + 2 + 4 * 7) + (9 * 7 + 4 * 5 + 3) * 2) + 6 * 6 * (7 * 2 + 5) + 7
        3 + 5
        7 * ((6 * 2 * 5 * 2 + 5 + 2) * 4 * 2) * 3
        9 * 2 + 4 + 7 * 3
        9 + (9 + 8) * (9 + 2 + 9) * 3 + (6 + 7 * 6)
        5 * 2 * 2 * (8 + 4 * 5 + (6 * 9 + 4 + 7 + 5) + 7 + 2)
        9 * (6 * 3) + 6 * 9 * 4 + 3
        2 + 2 + 6 * (2 * (7 * 8) + 2 + (5 + 3 + 9) + 3) * 8 * 4
        9 * (5 + 3 + 7 * 4 + 9 * 3) * (7 + (3 + 3) * 9 * 9 + 7) * 6
        (2 * 2 + 4 * (8 + 2)) + 5
        ((4 + 9 * 7) + 3) + 7 + 3 + 9 * 6
        4 + 8 + (7 + 2 + 2 * 8 * 6) * 4
        ((2 + 6 * 2) + 4 * 2 * 8 * 6 + 4) + 9 + 5 * 3 + 3 * 9
        3 * 6 + 2 + (5 * 6 * 7 + (3 * 2 + 4 + 6 + 4 + 3) * 9) + (9 * 2 + 8) * (4 + (2 + 8 * 6 * 2))
        3 * (8 * 8 * (3 + 3 * 4 + 7) * 2 + 7) * 4
        2 * 2 + 8 * 9 + 7 + 3
        (3 + 3 + 8 * 7) * (2 + 6 * 7 + 3 + 3 + 4) + 4
        8 * 7 + (3 + (6 + 6)) * 4 * 7
        2 * (5 * (4 + 6 + 7 + 8 + 5) + 6 * 3 + 7 * 5)
        9 + 2 * (6 * 4) + (9 + 9 * (9 + 3 * 9)) + 2 * 7
        8 + 7 + 6 + 3 + 6
        8 * 6 * 5 * (7 + (5 * 6 * 5 + 3) * (7 * 9 + 5) + 2) * 8 * (6 + 2 * 7 * 2)
        9 * 2 * ((8 * 3 + 9 * 4 + 5 + 9) * 7 * 4) * (9 * 6 + (6 + 9 + 2 + 9 * 2) + (4 * 3 * 5 + 3 * 7) * 3) * (8 + (9 * 9 * 2 + 6) * 3) + (9 * 9 * 5)
        (6 * (6 * 3 + 2)) * 4 * (3 + (9 + 6 * 8 + 8 + 3) * 4 * (3 * 3 * 8 + 3 * 9 + 9) + 3) * 7
        7 + 3 * ((9 + 4 + 4 + 4 * 6 + 8) * 3 * 5 + 3 * 9 + 6) * 6 + (6 + 2 + (5 + 8 * 9) * 7 * 3) * (6 * 4 + 6 + 4)
        (2 + 8 + 6 + 9 * (3 * 6 * 7 + 9 + 6) * 8) * (6 * (9 * 4 * 4 + 5 + 8 * 8) + (3 * 4 * 3) * (6 + 2 + 5 * 8 + 7) + 6 * (5 + 7))
        6 + ((6 + 8 * 7 + 8 * 4 * 6) * 4 + 3 * 2 * (8 + 9 + 5 * 8 * 6 * 8))
        3 + 9 * 4 + (3 * (7 + 4 + 6 + 9 + 3) * 6 * 8 + 9 * (5 * 2))
        4 * ((4 + 9) * 9 * 8 + 7 + 6) * 6 * (5 * 7 + 9 * 9) * (5 + 6) * 5
        8 * 8 + 2 * (4 + 4 + 9 + 2 * 9 * 2) + (5 * 9)
        6 * 7 + 5 + (4 * 7 * 2 * (2 + 3 * 6 * 3 + 9)) * (3 * (3 * 5 * 5) + (2 + 3 + 6 * 9 * 3 + 7) + 9)
        4 + (4 * 2 + 7 * 5 + 3 * 7)
        ((5 * 4 + 6 * 7) + (4 + 5 * 6 + 9 + 2) * 8 + 2 + 6 * 4) * (2 + 2 + 2 * 3 + 4 + (8 + 7)) + 6
        (8 + 9 * 9 + 3 * 9) + 6 * 3 * 9
        (7 * 8 + 6 + 7) * 2 * 3
        6 + 5 + 4 * (5 * (9 * 8 * 9) * 5 + 3)
        9 + 7 + (2 + 7) + 2
        2 + 9 * 7 * (4 + 4) + ((9 * 2 * 2 * 9 * 5 + 7) * 5 + (9 * 3)) + (5 + 9 * 7 * 8 * 2)
        (5 * 6) + (5 + 6 + 5) + 9
        3 + ((3 * 5 + 7) * 9 * 9) * 5 * 5 + (4 + 6 + 7 * (8 * 8 * 7 * 9 * 9) + 4 + 9) * 9
        ((4 + 3 * 4) * 2 * (7 + 3 * 5 + 4) + 6 * 9) * 9 * 9
        3 * 2 * 9 + 3 + 3
        (4 + 2 + 3) * 8 * 6 * 3 + 2
        (8 * 7 + 4 + 2 * 3 + 3) + (7 + 3 * 5 * 4 + 7 + 7) + 6
        (7 + (8 * 7 * 8) + 4 * 6 + (5 + 9 + 2 * 7 + 2 * 8)) + (2 + 5 + 6)
        6 * (9 + (6 + 7) * 3) + 6 + (9 + 7) + 3 * 8
        3 * (7 * 7 * 8 * 2 + 3) + (6 * 7 + 3 + 9 * 4 + 6) * 7 * 7 * 9
        (6 + 5 * (5 + 2 * 7 * 5 + 9) + (3 * 9 * 5) + 3) + (4 + 4)
        (6 * 9 + 3 + 2) * 3 + ((8 * 3 + 4 + 5 * 8) + (8 + 9 * 8 + 6 * 3 + 7)) + 9
        (5 * 3 + (4 * 3 * 6) * (7 * 4)) + 8 + 8
        (4 + 8 * 7) * 9
        8 * 7 + (7 + 5 * 6 + 3)
        (6 + 2 + 7 + 6) * 4 + 2 + 4
        5 + (9 + 3 + 6 * 4)
        9 + ((8 * 7 * 4 + 5 + 4) + 5 + 8) + (2 + 5) + 6 * 9 * (5 + 7 + 2)
        (3 * 9 * 4 + 2 * 7) * 4 + 2 * 3 + 2
        (9 + 2 + (6 + 3 + 6 * 6 * 4) + 3 + 6 * 5) * ((3 + 2 * 2 * 3 * 2) * 8) * 9 + 2 * (5 * 7) * 2
        6 * (7 * 8 + 2 * 9 + 8) + (8 + (5 + 4) + (3 + 4 + 9 + 5) + 9)
        2 * 2 * (2 * (3 * 3 * 2 + 5 * 8) + 8 + (9 * 8 * 3)) + (6 * 5 * 3 * 9) + 6
        6 + 9 + 6 * 9 * 7 * (5 * (8 + 4 + 2 + 2 + 7 + 4) + (9 * 4) * 8 + 7 * 9)
        9 + (3 * (8 + 5) + 9 * 9 + (8 * 8 * 8 * 7 * 3 * 8) * (8 + 4 + 6 + 5 + 9))
        4 + (6 * 3) * (7 + 8 * (2 + 4)) * 5 * 9 * 5
        4 * ((6 * 4 + 2 + 5) * 5 * (2 * 6 * 5 * 3 * 4 * 6) + 3 * (4 + 9 + 5 + 3 * 2))
        7 * 2 + 4 + (7 * 6) + 4 * 6
        (6 * 7 * (6 + 7 * 9 + 3 * 6 * 3) + 5) * 3 + ((7 + 9) + 7 + 9 * 8 * (4 * 5 + 4 + 4 * 4) + (3 + 8 * 5)) + 2 + 3 + 3
        (7 + 9 + 9) + 5 + 2 + (3 + 8 + 9 * 4 * 6 + 8)
        3 * 6 + (9 + 7) * ((4 + 6 + 6 * 4 + 5) * 3 * 8)
        5 + 5 + (4 * 7 + 5 + 3 * 4 + 5) * 8 * 6 * 7
        3 * 2 * (2 + 8 + 4 * 5 * 6) + (5 + (2 + 8 * 2 + 4 * 8 + 4) + 8 * 3) * 4 + 5
        (4 + 5) * (9 * 4 + 7) * 3 * 7 + (4 * (7 + 5 + 3 * 7 + 3 * 2)) * 9
        8 * ((2 + 5) * (9 * 8) + 8) * 6 * (6 + 6 + 8 * 4 + 6) + 8 * (8 * (7 + 8 * 9))
        4 * 9 + (9 * 8 * (6 * 3 + 8 * 9 * 4) * 3) * 8 + 8
        (5 + 3 + 6 + (3 + 8 * 7) + 6) * 7
        3 + 8 + (9 + 8 * 5) + 8 + 7 * (9 + 3 * 4)
        2 + 7 * (2 + (9 * 8 + 5 * 7 * 2) + 3 * (4 + 2 * 8 * 5) + 8 + 9) * 5 + 4
        ((5 * 3 * 9) + 9 + 9 * 9) * 9 * 4 + 6
        7 + (6 + 7 + 4 * 6) * (6 + 6 + 3 * (6 * 7))
        ((6 + 3) + (8 * 2 * 4 + 7 * 4 + 3)) + (9 * (7 + 3 + 6 * 6)) * 7 + 2 * 3 + 7
        5 * 3 * (6 + 3 + 4 + (7 * 7) + 6 * (8 * 6)) + 9
        (6 * 9 + 8 + 6 + 4 * 3) + 8 + ((4 + 3 + 6 * 2 * 6 * 2) + 8 * 7 + (6 + 5) + (6 * 7) * 4) * 8 * 8 * 6
        ((9 * 5 * 6 * 9 * 7) + 8 * 6) * 4 * 8
        2 * (8 * 3 + 9) * 9 * 3 + 3 + (2 + 7 + 4 + 4 * 5 + 5)
        (5 * 3 * 8 + 7 * 5 + 7) + 8 + 3 + (7 * (5 + 6 + 4 + 6 * 5) * 3 + 9) * (9 * 7 * (8 + 9 * 8 + 5 + 9 + 8) + 2 + (3 * 5 + 9 * 5 * 5) * 6) + 4
        ((3 * 4 + 9 * 3 + 7 + 9) + 9 * (3 * 9 + 2 + 2) * 8 * 2) + ((7 * 6) * 3) * 8
        (3 + 7 * 4) * 3 * (7 * 3 + 3 + 8 + 3) + ((5 * 5) * (9 + 8 + 2 * 3 + 3) * 4 * (8 + 2) + 9)
        (7 * 6 + 8) * 8 * 9 * (5 * 3 * (2 * 4) * 3)
        6 * 5 * 2 * 4 + ((8 + 7 * 3) + 6) * 6
        2 + ((9 * 2 * 8 * 4 + 4 * 3) * 4 * 3 + 6) * 8 + (9 * 8 + 3) + 7
        2 * (7 + (8 + 2 + 4 * 8 * 5)) + 9 * 2
        7 + 2 + 7 * (7 * 6 * 5) * 8 * 2
        ((3 + 9 * 2 + 9 * 5 * 3) + 8 * (5 + 5 * 3 + 7 + 6 * 4) + 7 * 9 + 9) * 2 + 4 * 7 * ((5 + 8 * 2 + 4) * 3) * 9
        6 * (9 + 9 * 4 * 4 * 3 * (5 * 8 + 4 + 5 + 7 * 8))
        (7 * 3) * 6 + (6 * 4) * 6 * (6 * (4 * 4 + 4)) * 2
        3 * (4 + (5 * 6 + 2) + 2 * 3 + 2 * 2)
        2 + 9 + 3 * (7 * 2 * 8 * (2 * 2)) * 8
        9 * 9 + 4 + (6 * 8 * 4 + 9 * 9 + (2 + 3))
        6 * 3 + 6 + ((4 * 7 + 8 * 9 * 3 * 9) + (5 * 9 * 7) + 9) * (2 + 5 + 4)
        ((8 * 7 * 4) + (7 + 6 * 8 + 7) + 8 + 3 + 4 + 4) * 6 + 5 + (2 + 2 * 5 + (8 + 2) + 8) + 7 * (7 + (7 + 3 + 9 * 7 + 6))
        2 + 5 * 8 + (5 * 2 + (5 * 2 * 8) + 4 * 7) * 7
        (8 * (3 + 7 * 2) * 7 + 3) + 4
        9 + (6 * 9 + 2 * 4 * 4) * 3 + (8 * 4 + 9 * 8 * 6) * 9
        (8 * 4 + 5 + (8 * 4 * 8 + 5)) + (2 + 3 + 3) + 5 + 6
        6 * 3 * (8 * (2 * 3) + 8 * 2 + 5) * 9
        (9 + 2) + ((6 * 5 * 4 + 8 * 6) * 3 * 9 * (8 * 9 * 2 + 4) * 4 + (9 * 9 + 5))
        ((3 * 4 * 7 + 4 + 3) + (8 * 7 + 2 * 7) + 4 + 5 + 6) + 2 + 9 * (4 * 3 + (6 * 8 * 8 + 4 * 3) * (3 + 5) + 5) + 2
        6 * (4 * 7 * 4 * (8 * 9 * 6 * 2 * 9)) * 7 * ((3 + 6 * 5 * 2 + 9 + 7) + (8 + 3 * 3 * 3) * (7 + 7) + 4) + (6 * 9 * 5 + 6 * 2 * (5 + 4 + 3 * 3))
        5 * 2 + 7 + 8 + 3 * (3 + 3 * 7 * 9)
        4 + ((7 * 5 + 9 * 3 * 2) + (9 + 9 * 6 + 9 * 2 + 5) * (4 * 7) * (9 + 3 + 9 + 7 + 2) * 3 + (2 + 6 + 4 + 5 * 6)) * 4 * 7 * 4
        5 * (6 * 3 + (6 * 4 + 9 + 5) + 9 * (3 + 3 + 9 * 5 + 2) * (4 + 5 + 8 + 7 * 5 + 7)) + 9 + 2 * (8 + 7 * 7 * 6 * 6 + 4) * 3
        (2 + 7 + 5 + 2 + 7 + 2) + 8 * 3
        (6 * (5 * 5 + 2 + 3 + 6 * 5) + 8 + 3) + ((3 * 6 + 4 + 2 + 8) + 9) * 3
        (2 + 8 + 6 + 3) + (5 + 6) * 7 + (8 * 2) * 9
        (4 * 8 + 3 * (5 + 7 + 9 + 5 * 3) * 5 + 7) * 8 * 4
        6 + 9 * 2
        9 * 2 + (6 + (4 + 7 * 7 * 3 + 5 * 4) * 9 + 8) * 8
        2 + ((2 + 8 + 9 + 2 * 2 * 5) + 8) + 6
        (4 + 2 + 7 + 6 * (8 + 9 * 2 * 9)) + (6 * 7 * 9 * 2 + 9 + 8) + 8 * 5
        5 * 8 + 6 + (4 + (4 * 9 * 6 * 3 + 9 + 7) + 7 + 5 * 4 * 3)
        8 * (6 + 7)
        6 * ((2 + 7 * 3 + 2) + 2 + 2 + 8 * 9) * 3 * 8 + 9 * 8
        7 * 4 * ((5 + 9) * 4 * 4) + 4 + 5 * 9
        (3 * 7 + 2) + (8 + 8 * 3 * 6 + 2) * 4
        5 + (8 + 2 * 9) * 7 * (5 + 3 * 3 * 6 + 2) + 6 * 9
        3 + 3 + 9 * 6 + 2 + 4
        9 + ((9 * 5 + 7 * 9 + 5) + 8 + (4 * 8))
        2 + (5 * 7 * (8 + 3 * 7 + 8)) + 4 * 6 + 3 * 4
        4 * 8 * 5 * (8 * 9 * 8) + ((5 * 8 + 9 + 6 + 7 * 3) + 9 + 3 + 6) * 7
        8 * (7 + 7 + 2 * (3 + 6 + 2 * 5 + 8)) + 3 + 7 * 4 + (2 * 4 + 6 * 2 * 6 + 8)
        (5 + (7 * 6 + 3 + 4 * 2 * 2)) + 7 * 4
        6 * ((6 + 3) + 8 * 6 + 9)
        8 * 7 * (2 * 8 * 4 + 8 + (6 + 7 * 3 * 5) + 9) + 6 + 4 * 2
        7 * ((8 + 4 + 8) + 9 + 7) * (6 * 9 * 2) + 5
        6 * (5 * 9 + 5 * 2 + 7) + 2 * 5 + 2 + 6
        (7 + 3) * 3
        (2 + 9) * 2 + (4 + 3 * 9 + 7 * 7 + 9) + (9 * 7 + 6 + 5 * 6) + 4 + 5
        9 * 2
        6 * 7 * 4 + (4 * 7) + 4
        9 * ((2 * 9 * 8) * 9 * 6 + 2 + 8 + (5 + 2 * 3 * 4 + 6 + 6)) * 7 + ((4 + 7 * 3 * 7 * 5) + 2 * (3 + 3 * 4 + 4 + 3) * 5 * 8) + 8 + 6
        (7 + 4 * 2 * 4) * (6 * 5)
        (9 + 3 + 4 + 8) + (2 + 8 + 7) * (7 * (5 * 3 * 2) + 7 * (9 + 2 * 5 * 7 * 9))
        (2 * 9 * (4 * 7 + 9 + 5 * 4) * 6 * 2 * 6) * 6 + 9 * 6
        (6 * 2 + 2) * (6 * 2 * 4) * (4 * 4 + 7) * 8 + 4
        7 * 4 + 9 + 6 + (6 * 3 * 9 + (3 * 2 * 7 + 7 + 2 * 7) * (4 * 4 + 2 + 7 * 9 * 3) + 4)
        6 + 5
        4 + 3 * (5 + 8 + 7 + 9) * 3 * 6
        (2 + 5 + 4 + 9 * 9 + (7 * 3 * 8 + 3 * 7 + 2)) + 6 + 5 * 7 + 6 + 9
        (5 * 6 + 3 + (7 + 7) + 8) + 8 * 2 * 5
        4 + ((5 * 9 + 5 + 2 * 6 + 6) + 9 + (7 + 9 * 4 * 7 * 8)) + 6 * 4 + 3
        (2 + 7) + 9 * 4 * 3 + 9 * 7
        8 * (2 * 7 + 8 + (4 * 6 + 6 * 4 + 6) + 2 + 9) + (3 + 6 * 6 + 7 + 4 + 4) + (4 + 2)
        6 * 8 + 5 + ((8 * 8) * 6) + 4 + 2
        ((4 * 5) + (3 * 4 + 9) * 3 + 4 + 9) + (4 * (5 + 6) * 2 * 6) * 7 + 6 * (6 + 8 * 9 * 9 * (8 * 2 + 4) * 8) + ((9 + 9 + 4 * 4 + 7) + 6 + 8 + 8 * 8)
        7 * 7 * (6 * (6 + 3) * 6 * 4 + (2 + 6 + 9 + 9 + 8) + 7)
        6 + 9 + (5 + 5 * 4 * 7 + 9 + 3)
        4 + (6 + 5 + 4 + 3) * 9 + 8
        3 * 4 + 6 + ((6 + 9 * 3 * 4 * 9 * 7) * 7 + 7 + 9 * 4 * 3) * 3
        (6 * (2 * 5 * 6) + 8 * (2 * 4 * 9 * 3 + 6)) + (5 * 6) + 6 * 6
        (8 + (4 * 6 * 4 + 2 * 9 + 3) + 4 + (7 + 5 * 8 * 8 + 8)) * 6 * 9
        ((3 + 9 * 8 * 8) + 9 * 5 + 6) + 5 + 8 + 4
        2 * (9 + (6 * 6) + (5 + 3 + 8 * 4) * 3 * 6) * 8
        3 + 5 * (4 * 2 * 5) * 3 * 5
        4 + 2 * 7 + (4 * 7 * 6 * (6 + 3) * 5 + (8 + 6 * 7 * 7 + 9))
        (4 * (6 + 3 * 9 + 7 + 3) + 9) * 5 * 2 * (8 + 4 * 7)
        (4 + 2) + (6 * 6 + 4 + 8 + 9) + (3 + 9 + 6 + 7 * 6) + 2 * 5
        (5 * 5 * 2 * (2 + 8 * 9 * 8 + 3)) * 4 + 6 * 5
        3 + 9 * 3 + (7 * 6 * (9 + 6 + 2 + 3 * 4 + 4) + 8)
        (3 * 9 * 5 + 8) + 9 + 5 * 9 * 5
        (8 * 2 + (3 + 6 * 4 + 3 + 9) * (9 + 6 + 3 * 6 * 9 + 4)) + 9 + 9
        4 + 7 + (6 * 6 * (5 + 5 + 8 * 4 + 8 + 7) * 8 + 9 * 7) * ((5 + 2) + 3 * 9)
        6 + 5 * 8 * 7
        ((8 + 4 + 7 + 4) * 5 * 6 + 4) * (5 + 4 * (6 * 2 * 4 * 4 * 9 * 2)) + 8 * (6 * 4 + 3 * 6 + 4) + 5 + 8
        (7 + 5 * 2 * 7 + 2 + 7) + 2 * 6 * (2 + (7 * 8 + 2 * 4 + 6) + 4 + 2 * 7)
        3 + (9 * (7 * 3 * 5 * 7 + 3 * 3)) * 3 + 6 * 2
        (6 * 8 * 5 * 3 * 4) * 5 + (6 + (2 + 2 + 2 + 5 + 8)) + 5 * 8 * ((5 * 3 * 4 * 3 * 4) * 7 * 6 * 6 + (4 + 5 * 4 + 6 * 8))
        9 + (6 + 9 * 9) * 7 + 6 * 4 * 2
        9 + (2 + 5 + (9 + 8 + 3 * 7 * 5 * 6) + 8)
        9 + 2 * 9 + 4 + (7 + (3 + 3) * 5) * 6
        ((2 * 8) + (9 + 5 + 3) + 7 + 4) * 4 + 4 + 6 + (9 + 6)
        5 + 8 + 8 + 4 + 5 + (6 * 4 + (7 * 3 + 8 + 9) * (4 + 7 + 6 + 3) * (5 + 8 * 4 + 5 + 7 * 4) + 9)
        7 * 5 + (9 * 9 * (9 * 5 * 8 + 8) + 7 * 9)
        9 * 2
        9 * 7 * (7 * 3 * 6 + 2 + 5 * 2) + 4 * (8 + 4 + (3 + 5 + 7)) + 3
        5 * (6 * (8 * 5 * 9 * 2) + 7 * (6 + 7 + 3)) + 6 + 9 + 8 * 6
        6 * (6 * 8) * (6 + 3 * 8 + 2) * (7 * 5 * 7 * 8) + 4
        7 + 8 + 6 * 4 + ((9 + 2 + 4 * 4 + 8 * 3) + 7 + 8 * 2 * 5 + (7 + 8 + 4 + 4 * 2 + 7))
        ((8 + 5 + 5) * 6 * (2 * 2 * 5 * 4 + 5 * 8) + 9 * 5) * 8 + 2 * 8 + (7 * (2 * 5 + 2 * 7) + (7 * 4 + 7 * 6 * 9 + 6) + 7 + 9 + (3 * 4 + 5 * 4)) * 9
        2 + 7 + (2 + 5 * (9 * 7 + 9 + 4) * (3 * 4 * 5 * 3 + 2 + 9) * 3 * 5) + 8 + 8
        (9 * 4 + (3 * 9 + 2 + 7) * 6) + 8 + 6 * ((5 + 6 + 7 * 8) * 2 + 6)
        6 + (8 + 2 + 5 * 7 * 3 * 6) + 4
        ((4 * 5 + 5 * 4 + 2 * 8) * 6) + 5
        8 + 7 + 8
        2 * 5 + 2 + (9 + (9 * 6 * 6) + 9) * (6 + 6 * (3 + 5 * 5 + 9 + 2))
        5 + (3 * 4 * 7 * 4) + 2 + 9 + 6
        6 + 9 * (3 * 3 * 9 * 6 + 2 * 9) + 6
        2 + ((6 * 5 * 8 * 5 * 4 * 5) + 5 * 4 * 5)
        2 + ((8 + 2 * 4 + 6 * 5 * 2) + 6 * (7 * 9 + 9 + 6 + 5 + 2) * (8 * 5 * 9 * 4) * 9 * 8) * (7 * 5) + (7 * 8 * 6) * 8
        3 + (8 * 9 * 7 + 4) * 6
        4 + ((7 + 7 * 8) + 4 + 7)
        9 * 6 * (9 + (9 + 5 + 6) * 3 + 9 + 5) * 7 + (6 * 9 + (6 * 5 * 6 + 5) + 4 + 8) * (3 + 9 + 9 + 2 + (5 + 9) + (3 * 2))
        (7 + 4 + (7 + 3 + 6 + 5) + (6 + 6 * 9 + 3 * 9 + 4) * 8) * (7 * 2 * 5 * 8) + (6 * 9 + 5 * 6) * 3 * 4
        7 + 8 * 8 + 4 * (8 + 8)
        5 * 3 * ((4 + 8 * 5 + 2) + (2 * 9) + (6 + 2 * 8) + 2 + 6) + 6
        (4 + (3 * 8) + (9 + 5 * 2)) + (7 * (3 + 3 + 7) + (8 * 9 * 4 * 9)) + 6 + (9 + 4 * 4 + 8 * 8 + 4)
        5 + (9 * (7 * 6) * 2)
        9 + 6 * ((9 + 5 + 4 * 6) * 4) + 7 + 9 * 8
        8 * 4 + (8 + 7 * 4 * 5 + 2)
        8 + 3 + ((4 + 5 * 3 + 6 + 3 + 8) + 4 + 7) + 9
        8 + 5 * (5 + 8 + 6 + (6 + 2 * 4 * 9 + 2 * 4))
        8 * 4 * (4 * (3 + 4) * 6 + 8 * 8 + 9) * (6 + 9 * (3 + 5 + 9 + 8 * 7 + 4) * 4 + 4) * 4 * 4
        2 * 4 * 4 * 9
        3 * 8 * 7 * (9 + (7 + 9) * 4 + 7 * 4)
        3 * 9 * (2 + 7) * (8 * 9 + 9 * 9 + 5 + 2)
        (7 * 6 + 4) + 4 * 6 + 4
        (5 * 2 * 9 * 7 * 7 * 7) + 6 + 7 * 2 * 2 + 4
        3 + 6 + ((6 + 7 + 7) + (7 + 4 * 8 * 7 + 7) * 5 + 3 + 7) + 9 + 9
        (4 * (9 + 5 * 6 * 6)) + 7
        ((4 * 9 * 8) + 9 + 3 + 9 * 5) + 9 * 6 * (9 * 4 * 2 + 2 * 9)
        (2 + 5 * 8 + 5) + ((2 + 8) * 4 + 2)
        5 * ((9 + 9 * 7 * 3 * 4) * 2 + 5 + 9 * 6) + (2 * 3) * 4
        9 + ((8 + 3 + 9 * 6) + 9 * 7 + (3 + 9)) * 9 + 6 * 2
        (2 * (9 + 7)) + 3 * (3 * 7 * 7)
        3 * 5 * 4 * 5
        7 * ((4 * 7 + 5 * 9 * 2) * 7 + (4 * 2) + 4 * 7 * 2) * 3
        ((6 * 2 + 2 * 7) + 2 * 5) * 7
        5 + 2 * 8 + (9 + 7 + 6 * 7 + 5) * 4 + 7
        2 * 9 + 7 + 5 + 3 + 2
        3 * 3 + (9 * 2 * 2 * 5 * 7 * 6) + 4 + 9
        2 * 5 * 7 * (6 * 6 * 3 + 6)
        (3 * 5 + (9 * 4)) + 7 * 4
        3 + 9
        ((2 * 3) * 9 * 6) + (7 + 2 * 9 + 2 + 9) * 9 * 9 * 9 * 3
        (9 + 4 * 8 + 3) * 6
        6 * ((2 + 6 + 6 * 2 + 2 + 7) + 3 * 4 * 3 + 2) * 6
        8 + 2 * 2 * 7 * 2 * (6 * 5 * 3)
        8 * (9 * (4 + 5 + 3) * 8 + 4 + 5 * 4) * 4 + (9 * 5) * (7 * (5 * 2 + 8 * 4 + 5 + 6)) * 8
        (8 + 3 + 8 + (3 * 4 * 3 + 4 + 9 + 9)) + (5 + 3 + (2 + 5) + 6 + (8 + 8)) * 6 * 8 * (4 + 8) * 7
        ((8 * 7) * 9 + (6 * 6 * 2 + 8 + 7) * (3 * 3 + 3 + 8)) * 2
        7 * (8 * 8 + (5 * 7 + 3 * 8 * 2) + 6 * (8 + 3 * 8 + 8)) + (4 + (6 + 5 + 8 * 6 * 2) * 6) + 6
        2 + 4 + 6
        3 * 5 * 3 + 8 + 8
        3 + 7 + 3 * (4 * 6 * 9 * 4 * 3 * 5) + 5 * 9
        3 * 4 * ((8 + 4 + 3 * 3 + 6) + 7 + 8) * 2 * 4 + 7
        7 + 6 * (7 + (8 + 9 * 7 + 2) * 3 + 4 * 7 + 5) + 8 + 6
        9 + 5 + 6 * 9 * (7 * (9 + 3 * 6 * 9 + 9) + 4 + 7)
        (2 + 9 * 7 + 5 * 5 + (4 + 5)) + 8 * 8
        ((8 + 3 + 7 + 5 + 8) * (9 + 7 + 4 * 4 + 7) + (3 + 7 + 8 * 7 + 2) + 6) + 3 * 8 * (9 + 3 * 8 + 7 * (5 * 7 * 3))
        8 + (2 + 3 + 7 * (9 + 5 + 8 + 5 * 5) + 5) + (8 + 2)
        6 * (2 + 8 * 7 * 2) + 4 * 8 * (6 * 8 + 2 * 2 * 6)
        7 + (8 * 5 + 3) + 7 * (7 + 4 * 8) + 5
        9 * (3 * 2 * 4 + 8 * (8 * 6 * 9 * 7 * 9) + 3)
        7 * 5 + ((5 * 9 * 4) * 7 + 5 * 3 * 5)
        (6 * 5 * (9 * 3 * 9 * 8 * 6 + 7) * 2) + 9 + 4 + 9 * 2 * 4
        5 + 2 * 9 + 9 + ((7 * 6) + 8) + 2
        (2 * 5 * 4 + (9 + 9)) * 3 + 4 + 7 * 9 * 8
        7 * (7 * 5 + 7) * (2 * 8 + 4)
        ((7 + 5 + 2 + 8 * 6 + 2) * 5 * 8 * 5) * 5
        2 * 8 * 7 + 9 + (2 + 8 * 4 * 8 + 2 * 5) * 5
        5 * (6 + (6 + 5) + (9 * 5) * 2 + 2 + 5) + 7 + 9 * 3 * 7
        9 * 8 + ((2 + 3 + 4 * 7 + 3) * 3) + 2 * 3
        7 * (6 * 9 * 2 * 4 * 5 * (5 + 8)) + (5 * 9 + 4 + 7) * 4
        6 * (2 * 5) * (8 + (5 + 6 * 5 + 6 + 4) + (4 + 9 * 9 * 9 * 2 + 2) + 6 + (2 * 4 + 9 * 8)) * 9 + 4
        (5 + 7) + (9 * (3 + 2 * 5) * 3 * 2 + 8) + 7 + (7 * 9 + 7 * 8)
        3 * 4 * ((3 + 5) * 3 * 9 + 7 * 4) * 7 * 5
        4 + (5 + 8) + 5
        9 + 2 * (4 + (3 * 4 * 6 * 4 * 9 + 5) + 7 + 4 + 5) + 3
        8 + (5 + 3 * (6 + 8 + 3 + 5 + 8 * 9)) + 7 + 4 * 9
        7 * ((7 * 6 + 4 + 7) * 7 + 3 + (6 * 3)) + 5 * 4 * 7 * (7 * 2)
        7 * ((8 + 8 + 5 + 3) * 7 * 8 + 6) * 8 * 7 + 5 + 3
        5 + 4 * 7 * ((6 * 6 + 3) * 5) + 9
        8 + 6 + 7 * (9 * 3 * 2 + 3) * 3 * (4 + 8 * 6 * 9)
        4 * 6 * 5 * (7 + (3 + 7 + 4 + 5) * (8 + 6 * 5 + 8) * 4 + 9) * 9 + 7
        8 + (8 + 6 * (2 * 9 * 8 * 2 * 8))
        9 + 7 * ((8 * 9 * 8 * 5 * 3) + 2 * 2 * 5 * 8 + (2 * 3 + 5 * 8 + 8))
        9 * 3 * 3 + ((6 + 4 + 5) + 5 * 7 + 8 * 8)
        3 + 4 * 6 * (4 + 9 * 5)
        ((5 + 3 * 3 + 4) + 6 * 6 + (5 + 8 * 2) + 3 * (9 * 3 * 6 * 9 * 9 + 6)) * 9 + (5 + 9 + 9 * 5 + (9 + 2 + 3 + 7 * 8)) + 5 + (6 + 3 + (5 * 5 + 3 + 9 + 3) + 8 + 2 + 8)
        6 * 8 * 4 * (8 * 2 * 3 * 3) * 3 + 2
        5 * 8 * 5
        9 + ((2 + 6 * 5) * 8 * 3 * 5) * 3 * 2 + 9
        (5 + (3 * 6)) * 2 + (5 + 3 * (6 + 7 * 9))
        8 + 9 * 5 + 3 * (6 + (3 + 4 + 6 * 6 + 2) + 7)
        9 * 2 + (6 + 8 * 4 * 2 + 5 * (3 * 7)) * 2 + 6
        4 * (2 + 7 + (3 + 8) + 7 * 9) * (4 * (5 * 8 * 5) * 3 + 8)
        9 + 2 + ((2 + 9) + 2 * 7 + 6) * 2
        7 + (3 + 9 * 4 + 5 * 5 * (8 * 8 * 4 * 8)) * 4
        2 * 5 * (5 * 2 * 6)
        5 * 6 + 8 + (7 * 2 * (8 + 9 * 7 + 9 + 8 * 9)) * (6 * 6 + 6) * (7 * 8 * 8)
        (2 * 3 * (8 * 2 + 3 * 4) + 2) + 9
        2 + 2 + 5 * ((5 + 4) * 4 + 6 * 4 + 4 * 6) + 5
        7 + 8 + 5 * 9
        7 + ((9 + 9 + 4) * (7 + 3 * 6 + 3 + 3) + 5 * 9 * 2)
        ((7 + 6) * 9 + (9 + 9 + 9) + 4 * 2) * 9 * 8 + 6 * 6
        (3 + 2 * 5 + 5 * 2 * 6) * 8 + (6 * 2 + 9) * (2 + 6 + 5) * (9 * 5 * 9 * 2)
        6 * (9 * 6 + (4 * 3 * 8 * 5 + 6 + 4) + 7 * 8) + 2
        4 * 8 + (5 * (7 + 5 * 8 * 4 + 2 * 9) + (5 * 9 + 2) * (9 * 4 * 4 + 7)) + 6 + 4
        8 * (9 + 3 + 7) + 3 * 2 + 6
        9 * 2 + 3 + (7 + 6 * 3 + 6 * 9) * ((4 * 3) * 2 + (2 * 9 + 2)) + 9
        (7 + 9 + 6) * 7 * ((5 + 2 + 4) + 5 * 8 + 7 + 9 + 6) + 5 * 9 * 7
        3 + 3 + 5 + 4 * ((2 + 4 + 7 * 7) + 7 + 9) * (5 + 3 * 8)
        6 * 3 + (6 * 5 * 9) + 8 * (4 + (5 * 5 * 7 * 6 * 4) * (2 + 6 + 3 + 6 * 2) * 3 * 3 * 4)
        6 * 8 * 5 * 5 * ((3 * 9 + 3 + 4 + 5) + (6 + 3)) * 3
        (2 + 3 + 3) * 8 * (4 + 3 * 8 * 9) + ((6 * 5 * 8 + 9 + 9) + 6 + 3) + 9
        4 + 8 + (6 + 6 + 9 + 6 * (6 * 8 + 7 * 8 + 3) + (4 + 6 * 9 * 8)) * (5 * 2)
        (2 + (9 * 8 * 3 + 4 * 6 * 5)) + 3 * 9 * 9 + 9
        (9 * (2 + 7) + (7 * 2 * 2 * 8)) + 2 + (4 + 9 * 2 * 2 * 8 + (5 + 9 * 7)) * (9 + 6 * 8 + 9 + (6 + 8 * 3 * 6))
        (4 + 8 + (9 * 9 + 5 + 5) + 7) + 6 + 6 + 8 + 8 + 3
        (6 + 5 + 9 + 4 * (6 * 8 * 8) * 7) + 9 + 6 + 7 * 4
        (5 + 3 * (2 + 3 * 7 + 6) + 3) * (8 * (5 * 8 * 5 + 9) * 9) * (3 + 4 + 2 * 6 * (2 + 5 * 8)) * 6
        8 + 7 * 7 + (4 + 4) + ((9 * 3 + 8 * 6 * 8) * 5 + (9 + 5 + 7 * 5 * 5 + 7) * 8 + 4) + 4
        2 + 5 + 3 + 3 * 7
        (4 * 4 + 3 + (3 * 5 * 4) + (9 * 4 + 2 * 8)) * 4
        5 + (9 + (4 * 7) * (8 + 4 * 7) + 5) * 5
        2 + 2 * 6 * (4 * 7 + 8 + (2 + 8 * 9) + (7 * 9 + 2 + 4) * (4 * 5 + 9))
        5 + ((8 + 4 + 9 + 8 * 6) + 7 + 7 * 8)
        (4 + 4 * 2 + 8 * 3 + (9 + 3)) + 2 + (3 + 7 + 2 * 7 * 9)
        2 * 5 * 9
        2 + 3 * 4 + 7 + (9 + 4 * 4)
        ((8 * 2 * 7 + 7 * 2) * (5 + 6 * 9 + 5 * 5 + 5) * 8 + 3) * 5 * 2
        9 * (4 + (5 * 2 + 4 * 6 + 5)) * 6 + 3 * 8 * 4
        8 * (7 + 7) + 7 + 3 + 7
        8 + (6 * 9 * (6 * 3 + 5 * 2 * 5) * 5) + 8 * 4 + 3
        (2 * 5 + (3 + 8)) * 7 * (2 * 9 + 7) + 4 * 8
        5 * (5 + 9 + 5 * 7 + 7 * 2) + 4 * 8 + 6
        4 * (2 * 5 * 5 + (2 * 6 + 9 * 4)) + 2 * 7
        5 * 7 + 7 + ((7 + 5 * 6 + 8 + 9 * 6) * 4 * 5) + 9
        7 * 6 * 9 + (6 * (3 + 7 * 4 * 5 * 6 * 5))
        3 * 2 + (6 * (7 * 9 * 8 + 6 * 8 * 3) + 4) + 2 * 2 + 7
        7 * (6 + 2 + (7 * 8 * 6) + 6) + 8 * ((4 * 7 + 2) * 7 * (7 + 7 + 4 * 9 + 2 * 3))
        (6 + (3 * 4 * 2 + 8 + 9 * 6) * 7 + 9 * 2 + 6) * 9 * 7 * 6
        2 * (4 * 3 + 9 + 6 + 3)
        2 * 9 + 3 * ((4 + 2 + 3 + 4 + 9) + 2 * 3 + 2 + 7 * (8 * 5 + 3 + 7 * 2)) * 8 + 5
        5 + 4 * 4 + 3 * (5 + 2 * 8) + (2 * 4 * 7 * 8 * (2 * 2 + 9 + 7 + 3) * 8)
        (2 * 8 + 5) + 4 * 2
        (4 * 2 * (2 * 6 + 5 * 3) + (6 + 2 * 9 * 2 + 6) + 5 * 8) * 4 * 9 + 9 * (5 * 4 + 3 + 8 + 2)
        (3 * 2 * 6 * 9 + 9 * 5) + 9
        (8 * (8 * 3 + 5)) + 6 * 8 * (5 * 6 + (6 * 6 + 6 * 5)) + 9
        6 + 7 * 7 * 3 * 3 * 8
        (7 + 9 + 5 + 9 * 4 + 3) + 6 + 2 * 5 * 6
        2 + 4 + 6 * (8 * 3 * 7 * (7 + 2 * 3))
        ((4 * 4) + 8 + 3) * 9
        (8 + 9 + 4) + ((2 + 8 * 6 + 5) * (6 + 7 * 5) * 3 + 9 + 5 + (3 + 3 + 2 * 3 * 5))
        (7 + 6 * 7) + (4 + 6 + 5 * 9) * 9
        (3 + 2) + (4 + 9) * (3 * 9 + 5)
        3 + (8 * (6 + 4))
        2 * (9 * 2 + (9 + 7)) * 5 * 2
        3 + 3 * 3 * (7 * (2 + 5 + 2 + 4) + 5 * 4 + 5 * 4)
        ((8 + 4 * 4 + 5 * 8 + 8) + (9 + 3) + 9) + 6 + (9 * 8 * 6 + 7 * 7) + 7 + (4 * 2 * 9 * 8)
        8 * ((6 + 7 * 9 * 9) + 6 + 2 * 4 * 8) * ((7 * 2) * 9 * 8 * 8 * 6 * (3 * 7 * 3)) * 8
        ((8 * 9 + 4 * 8 * 6) * (6 * 9) + 8 * 3) * 8 * 9 * (7 + 8 + 8) + 9 + 7
        3 + (9 + 9 * (2 + 3 * 7 + 3)) * (2 + 6 * (4 * 4 * 5 + 6)) * 6 + (9 + 9 + 7) + (2 + 9)
        9 + 2 * (4 * 5 * 6 * 5 * 3 * 9) + (9 * 8 + 7 + 6 + 6 + 6) * 6 * 7
        4 * 7 * 7 + 7 + 4 + ((3 * 3) * (7 * 9))
        9 * 9 * 2 + 6 + ((2 * 4 + 2) * 8 * 2) + 4
        4 + 5 + 9 * 3 * 7 + (2 + 9 * 6 * 4 + 9 + 8)
        3 * (7 * 8 + 3 * 2 * 6) + (4 * (7 + 3) * (4 + 9 + 9 + 7 * 8) + 9 * 5) + 2
        3 + 6 * 4 * 8
        3 + 4 + (7 * 7 + 6) + (6 * 3 * 8 * 6) * 3 * 2
        (6 + (4 + 9) * (7 + 4 + 3) + 5 + 2) + 6
        3 + 4 * 9 + 5 * 4 + 7
        8 * 8 * ((6 * 9 + 9) * (5 + 2 + 4) * 8 + 8 * 4 * 3) * 8 + ((2 * 6) * 2 * 4 * (3 * 9 + 7) * 2 + 5) + 8
        (2 * (9 + 5)) + (9 + 5 + 3 * 5 + 3 * 2) + 5 + 5
        (9 + (8 * 9 * 4 * 5 + 4) * 9 * 4 * 9 * 4) * ((6 * 9) + 3) * (6 * (3 * 5 + 6 + 9 + 2) * 6 + (4 + 5 + 3 + 2 + 2 * 4)) + 8 * 4 + 9
        (7 * (9 + 4 * 9)) + (7 * (8 + 3 + 3) * 3 * 5 + 7 + 5) + (3 * 2 * 9 * 4) + 5 + 6 + 7
        (7 + 9) * 6 * 9
        (8 * 3) * 8 + (6 + 2 + 2)
        6 * 8 + 5 + 7 * (4 + (4 * 3 + 2 + 3 * 7) + 4 * 2 * 7)
        7 * 8 + (4 + 2 + (8 + 9 * 7 * 3 + 6 * 9)) + 5 * 7
        4 + (8 * (4 + 5 + 5) + (4 + 8 * 5 + 2 * 5 * 8) + 2 * 9) * 9
    """.trimIndent()

    class Calculator private constructor(private val expressions : Array<String>){

        private val operations = setOf('+','*')

        fun calsEvalSums() : Long {

            var sum = 0L
            for (v in expressions.map { evaluate(0,it,it[0]=='(') })
                sum += v.first

            return sum
        }

        private fun evaluate(startIdx : Int, expr: String, findClose : Boolean) : Pair <Long,Int> {

            var acc = 0L
            var value = 0L

            var idx = startIdx
             when(expr[idx]){
                in arrayOf(')','*','+') ->
                    throw IllegalArgumentException("first operand cant be in [')','*','+']")
                '(' -> {
                    val (s,i) = evaluate(idx + 1, expr, true)
                    acc = s
                    idx = i
                }
                else -> {
                    acc =expr[idx].toString().toLong()
                    idx++
                }
            }

            while (idx != expr.length  &&  (!findClose || findClose && expr[idx] != ')') ) {

                val isSum = when (expr[idx]) {
                    '+' -> true
                    '*' -> false
                    else ->
                        throw IllegalArgumentException("invalid operator character")
                }
                idx++
                when (expr[idx]) {
                    in arrayOf(')', '*', '+') ->
                        throw IllegalArgumentException("second operand cant be in ['(',')','*','+']")
                    '(' -> {
                        val (s,i) = evaluate(idx + 1, expr, true)
                        value = s
                        idx = i

                    }
                    else -> {
                        value = expr[idx].toString().toLong()
                        idx++
                    }
                }
                acc = if (isSum) acc + value else acc * value
            }

            return acc to ++idx
        }

        fun calculateWithSumPriority() : Long {
            return expressions.asSequence().map { it.toRPR().calculateRPR() }.sum()

        }

        //преобразование выражения в обратную польскую запись
        private fun String.toRPR() : String {

            val sb = StringBuilder()
            val stack = Stack<Char>()

            for (ch in this){
                if (ch != ' ')
                    when (ch) {
                        '(' -> stack.push(ch)
                        ')' -> {
                            while (stack.last() != '('){
                                sb.append(stack.pop())
                            }
                            stack.pop()
                        }
                        in operations -> {
                            while  (stack.isNotEmpty() && higherOrSamePriority(ch,stack.last())){
                                sb.append(stack.pop())
                            }
                            stack.push(ch)
                        }
                        else -> sb.append(ch)
                    }
            }

            while (stack.isNotEmpty())
                sb.append(stack.pop())


            return sb.toString()
        }

        private fun String.calculateRPR() : Long {

            val stack = Stack<Long>()

            for (ch in this){
                if (ch !in operations){
                    stack.push(ch.toString().toLong())
                }
                else {
                    val a = stack.pop()
                    val b = stack.pop()
                    stack.push( if (ch == '+') a+b else a*b)
                }
            }
            return stack.pop()
        }

        private fun higherOrSamePriority(curr:Char, other:Char ) : Boolean {
            if (other == '(') return false
            return other != '*' || curr != '+'
        }

        companion object {

            private fun String.removeWhitespaces() : String {

                val sb = StringBuilder()

                for (ch in this){
                    if (ch != ' ') sb.append(ch)
                }

                return sb.toString()
            }

            fun fromInput(inp:String) : Calculator {
                return Calculator(inp.split("\n").map { it.removeWhitespaces() }.toTypedArray())
            }
        }


    }

    fun getResult() : Long {
        return Calculator.fromInput(input).calsEvalSums()
    }

    fun getResultAdvanced() : Long {
        val calc = Calculator.fromInput(input)
        return calc.calculateWithSumPriority()
    }

}